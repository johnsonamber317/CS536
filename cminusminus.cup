/**********************************************************************
 Java CUP specification for a parser for C-- programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal		REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;  
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal LinkedList       varDeclList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal FnDeclNode	      fnDecl;
non terminal LinkedList       formals;
non terminal LinkedList	      formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode       fnBody;
non terminal LinkedList       stmtList;
non terminal StmtNode         stmt;
non terminal ExpNode	      exp;
non terminal ExpNode	      term;
non terminal CallExpNode      fncall;
non terminal LinkedList	      actualList;
non terminal TypeNode         type;
non terminal ExpNode	      loc;
non terminal IdNode           id;
non terminal StructDecNode	  structDecl;
non terminal LinkedList		  structBody;
non terminal AssignNode		  assignExp;
 
 
/* NOTE: Add precedence and associativity declarations here */
precedence left OR, AND;
precedence nonassoc EQUALS, NOTEQUALS, LESS, GREATER, LESSEQ, GREATEREQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence nonassoc NOT;

start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;
varDeclList     ::= varDeclList:vdl varDecl:vd  
				{: vdl.addLast(vd);
					RESULT = vdl;
				:}
				| /* epsilon */
				{: RESULT = new LinkedList<VarDeclNode>();
				:}
				;          

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                |fnDecl:f
                {: RESULT = f;
                :}
                | structDecl:s
                {: RESULT = s;
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                | STRUCT id:t id:t SEMICOLON
                {: RESULT = new VarDeclNode(new StructNode(t), i, 0);
                :}
                ;
  
fnDecl			::= type:t id:i formals:f fnBody:b
				{: RESULT = new FnDeclNode(t, i, new FormalsListNode(f), b);
				:}
				;
				
structDecl		::= STRUCT id:i LCURLY structBody:b RCURLY SEMICOLON
				{: RESULT = new structDeclNode(i, new DeclListNode(b));
				:}
                ;
                
structBody		::= structBody:b varDecl:v
				{: RESULT = b(v);
				:}
                | varDecl:v
                {: LinkedList<VarDeclNode> varList = new LinkedList<VarDeclNode>();
                   varList.addLast(v);       
               	   RESULT = varList;
                :}
                ;
				
formals			::= LPAREN RPAREN
				{: RESULT = new LinkedList<FormalDeclNode>());
				:}
				| LPAREN formalsList:f RPAREN
				{: RESULT = (f);
				:}
				;

formalsList		::= formalDecl:a
				{: LinkedList<FormalDeclNode> formalList = new LinkedList<FormalDeclNode();
					formalList.addLast(a);
					RESULT = formalList;
				:}
                | formalDecl COMMA formalsList
                {: formalList.addFirst(a);
                	RESULT = formalList;
                :}
                ;
formalDecl		::= type:t id:i
				{: RESULT = new FormalDeclNode(t, i);
				:}
				;

fnBody			::= LCURLY varDeclList:vdList stmtList:sList RCURLY
                {: RESULT = new FnBodyNode(new DeclListNode(vdList), new StmtListNode(sList));
                :}
                ;

stmtList		::= stmtList:sList stmt:s
                {: sList.addLast(s);
				   RESULT = sList;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<StmtNode>();
                :}
                ;
stmt			::= assignExp:aExp SEMICOLON
                {: RESULT = new AssignStmtNode(aExp);
				:}
                | loc:loc2 PLUSPLUS SEMICOLON
                {: RESULT = new PostIncStmtNode(loc2);
                :}
                | loc:loc2 MINUSMINUS SEMICOLON
                {: RESULT = new PostDecStmtNode(loc2);
                :}
                | CIN READ exp:exp2 SEMICOLON
                {: RESULT = new ReadStmtNode(exp2);
                :}				
                | COUT WRITE exp:exp2 SEMICOLON
                {: RESULT = new WriteStmtNode(exp2);
                :}				
                | IF LPAREN exp:exp2 RPAREN LCURLY varDeclList:vdList stmtList:sList RCURLY
                {: RESULT = new IfStmtNode(exp2, new DeclListNode(vdList), new StmtListNode(sList));
                :}				
                | IF LPAREN exp:exp2 RPAREN LCURLY varDeclList:vdList2 stmtList:sList2 RCURLY ELSE LCURLY varDeclList:vdList3 stmtList:sList3 RCURLY
                {: RESULT = new IfElseStmtNode(exp2, new DeclListNode(vdList2), new StmtListNode(sList2), new DeclListNode(vdList3), new StmtListNode(sList3));
                :}	
                | WHILE LPAREN exp:exp2 RPAREN LCURLY varDeclList:vdList stmtList:sList RCURLY
                {: RESULT = new WhileStmtNode(exp2,new DeclListNode(vdList), new StmtListNode(sList));
                :}	
                | REPEAT LPAREN exp:exp2 RPAREN LCURLY varDeclList:vdList stmtList:sList RCURLY
                {: RESULT = new RepeatStmtNode(exp2,new DeclListNode(vdList), new StmtListNode(sList));
                :}			
                | RETURN exp:exp2 SEMICOLON
                {: RESULT = new ReturnStmtNode(exp2);
                :}
				| RETURN SEMICOLON
                {: RESULT = new ReturnStmtNode(null);
                :}
				| fncall:f SEMICOLON
				{: RESULT = new CallStmtNode(f);
				:}
                ;
assignExp		::= loc:loc3 ASSIGN exp:exp3
                {: RESULT = new AssignNode(loc3, exp3);
				:}
				;
exp				::= assignExp:assignE
                {: RESULT = assignE;
				:}
                | exp:e8 PLUS exp:e9
                {: RESULT = new PlusNode(e8, e9);
                :}				
                | exp:e8 MINUS exp:e2\9
                {: RESULT = new MinusNode(e8, e9);
                :}					
                | exp:e8 TIMES exp:e9
                {: RESULT = new TimesNode(e8, e9);
                :}	
                | exp:e8 DIVIDE exp:e9
                {: RESULT = new DivideNode(e8, e9);
                :}	
                | NOT exp:e8
                {: RESULT = new NotNode(e8);
                :}	
                | exp:e8 AND exp:e9
                {: RESULT = new AndNode(e8, e9);
                :}	
                | exp:e8 OR exp:e9
                {: RESULT = new OrNode(e8, e9);
                :}	
                | exp:e8 EQUALS exp:e9
                {: RESULT = new EqualsNode(e8, e9);
                :}	
                | exp:e8 NOTEQUALS exp:e9
                {: RESULT = new NotEqualsNode(e8, e9);
                :}	
                | exp:e8 LESS exp:e9
                {: RESULT = new LessNode(e8, e9);
                :}	
                | exp:e8 GREATER exp:e9
                {: RESULT = new GreaterNode(e8, e9);
                :}	
                | exp:e8 LESSEQ exp:e9
                {: RESULT = new LessEqNode(e8, e9);
                :}	
                | exp:e8 GREATEREQ exp:e9
                {: RESULT = new GreaterEqNode(e8, e9);
                :}	
                | MINUS exp:e8
                {: RESULT = new UnaryMinusNode(e8);
                :}	
                | term:t
                {: RESULT = t;
                :}
                ;
term			::= loc:loc5
                {: RESULT = loc5;
                :}
				| INTLITERAL:iLit
				{: RESULT = new IntLitNode(iLit.linenum, iLit.charnum, iLit.intVal);
				:}
				| STRINGLITERAL:sLit
				{: RESULT = new StringLitNode(sLit.linenum, sLit.charnum, sLit.strVal);
				:}
				| TRUE:true1
				{: RESULT = new TrueNode(true1.linenum, true1.charnum);
				:}
				| FALSE:false1
				{: RESULT = new FalseNode(false1.linenum, false1.charnum);
				:}
				| LPAREN exp:exp5 RPAREN
				{: RESULT = exp5;
				:}
				| fncall:fCall
				{: RESULT = fCall;
				:}
                ;
fncall			::= id:id3 LPAREN RPAREN
                {: RESULT = new CallExpNode(id3, new ExpListNode(new LinkedList<ExpNode>()));
				:}
				| id:id4 LPAREN actualList:aList RPAREN
                {: RESULT = new CallExpNode(id4, new ExpListNode(aList));
				:}
				;
actualList		::= exp:exp6
                {: LinkedList<ExpNode> expNodeList = new LinkedList<ExpNode>();
				   expNodeList.addLast(exp6);
				   RESULT = expNodeList;
				:}
				| actualList:aList COMMA exp:exp6
				{: aList.addLast(exp6);
				   RESULT = aList;
				:}
				;


type            ::= INT
                {: RESULT = new IntNode();
                :}
                | BOOL
				{: RESULT = new BoolNode();
				:}
				| VOID
				{: RESULT = new VoidNode();
				:}
				;
                
loc				::= id:i
				{: RESULT = i;
				:}
				| loc:location DOT id:id2
				{: RESULT = new DotAccessExpNode(location, id2);
				:}

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
				
